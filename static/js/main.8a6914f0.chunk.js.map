{"version":3,"sources":["components/Home.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","react_default","a","createElement","Fragment","index_es","container","justify","alignContent","alignItems","title","imagePath","demoLink","oneLineDesc","description","map","project","Home_ProjectCard","Object","assign","style","flex","Component","ProjectCard","state","hover","value","this","setState","objectSpread","_this2","props","className","onMouseOver","e","setHover","onMouseLeave","src","alt","href","concat","App","Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kQAIMA,mLA6BE,OACIC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,eAAeC,aAAa,SAASC,WAAW,UA5BnE,CACT,CACIC,MAAQ,+BACRC,UAAY,oCACZC,SAAW,6BACXC,YAAe,sBACfC,YAAc,8GAGlB,CACIJ,MAAQ,UACRC,UAAY,6BACZC,SAAY,qBACZC,YAAiB,oBACjBC,YAAc,wMAElB,CACIJ,MAAQ,gBACRC,UAAY,mCACZC,SAAW,2BACXC,YAAe,8BACfC,YAAW,kJAQGC,IAAI,SAAAC,GAAO,OAAEf,EAAAC,EAAAC,cAACc,EAADC,OAAAC,OAAA,CAAaC,MAAO,CAACC,KAAK,IAAQL,eAhCtDM,aAwCjBC,6MACFC,MAAM,CACFC,OAAQ,2EAEHC,GACLC,KAAKC,SAALV,OAAAW,EAAA,EAAAX,CAAA,GAAkBS,KAAKH,MAAvB,CAA8BC,MAAQC,sCAElC,IAAAI,EAAAH,KACEI,EAAQJ,KAAKI,MAQfP,EAAQG,KAAKH,MAEjB,OACIvB,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,0CACX/B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,iCACfC,YAAa,SAAAC,GAAC,OAAEJ,EAAKK,UAAS,IAC9BC,aAAc,SAAAF,GAAC,OAAEJ,EAAKK,UAAS,KAG3BlC,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,gBACX/B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,eAAeK,IAAKN,EAAMpB,UAAW2B,IAAI,mBACxDrC,EAAAC,EAAAC,cAAA,KAAGoC,KAAK,MACJtC,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,0CAKvB/B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,yBAGX/B,EAAAC,EAAAC,cAAA,MAAI6B,UAAU,cAAcD,EAAMrB,OAEjCqB,EAAMlB,aAAeZ,EAAAC,EAAAC,cAAA,KAAG6B,UAAU,aAAaD,EAAMlB,aACtDZ,EAAAC,EAAAC,cAAA,KAAG6B,UAAU,aAAb,IAA4BD,EAAMjB,YAAlC,KAEAb,EAAAC,EAAAC,cAAA,KAAGoC,KAAMR,EAAMnB,SAAUoB,UAAS,4CAAAQ,OAA8ChB,EAAMC,OAAS,kBAA/F,mBAzCEH,aAiDXtB,IClFAyC,mLANX,OACExC,EAAAC,EAAAC,cAACuC,EAAD,aAHYpB,aCSEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8a6914f0.chunk.js","sourcesContent":["import React , {Component} from 'react' ; \nimport {Grid} from '@material-ui/core' ; \n\n\nclass HomePage extends Component{\n    render(){\n        const rootLink =\"portfolio\" ;\n        let projects=[\n            {\n                title : \"Multiple Pendulum Simulation\" ,\n                imagePath : \"/assets/images/simplePendulum.gif\" , \n                demoLink : \"/projects/Simple Pendulum/\" , \n                oneLineDesc :  \"On and On and On...\" , \n                description : \"Simulate the visual effects of multiple user interactive simple pendulums with assumed physical constants.\" \n\n            },\n            {\n                title : \"Gravity\" , \n                imagePath : \"/assets/images/gravity.gif\",\n                demoLink  : \"/projects/Gravity/\" , \n                \"oneLineDesc\" :  \"So Pull Me Closer\" , \n                description : \"Simulation of mutual gravitational force between particles of variable sizes . The particles when collide follow momentum conservation and their colors also combine to form the new combined color.\"\n            },\n            {\n                title : \"Push and Pull\" , \n                imagePath : \"/assets/images/Push And Pull.gif\" , \n                demoLink : \"/projects/Push and Pull/\" , \n                oneLineDesc :  \"A game of mouse and mice :)\" , \n                description : `All objects are attracted to where you point your mouse and will have a beautiful repel effect for every object when mouse button is clicked.` , \n            }\n        ]\n\n\n        return(\n            <>\n                <Grid container justify=\"space-evenly\" alignContent=\"center\" alignItems=\"center\" >\n                    {projects.map(project=><ProjectCard style={{flex:1}} {...project}/>)}                \n                </Grid>\n            </>\n        );\n    }\n}\n\n\nclass ProjectCard extends Component{\n    state={\n        hover : false , \n    }\n    setHover(value){\n        this.setState({...this.state, hover : value})\n    }\n    render(){\n        const props = this.props ;\n        let hoverStyle={\n                    transition:\"all 0.3s\",\n                    color:\"white\" , \n                    backgroundColor:\"rgb(24,24,24)\",\n                    boxShadow:\"20px 10px 45px black\" , \n                } ;\n\n        let state = this.state  ;\n\n        return ( \n            <div className=\"col col-xl-4 col-lg-6 col-sm-12 col-12\">\n                <div className=\"card m-5 hoverable projectCard\" \n                onMouseOver={e=>this.setHover(true)} \n                onMouseLeave={e=>this.setHover(false)}  >\n\n                    {/* <!-- Card image --> */}\n                    <div className=\"view overlay\">\n                        <img className=\"card-img-top\" src={props.imagePath} alt=\"Card image cap\"/>\n                        <a href=\"#!\">\n                            <div className=\"mask rgba-white-slight waves-effect\"></div>\n                        </a>\n                    </div>\n\n                    {/* <!-- Card content --> */}\n                    <div className=\"card-body text-center\">\n\n                        {/* <!-- Title --> */}\n                        <h4 className=\"card-title\">{props.title}</h4>\n                        {/* <!-- Text --> */}\n                        {props.oneLineDesc && <p className=\"card-text\">{props.oneLineDesc}</p>}\n                        <p className=\"card-text\"> { props.description} </p>\n                        {/* <!-- Button --> */}\n                        <a href={props.demoLink} className={`btn btn-primary waves-effect waves-light ${state.hover && 'btn-secondary'}`} >Visit</a>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default HomePage ; ","import React, { Component } from 'react';\nimport HomePage  from './components/Home' ; \n\nclass App extends Component {\n  render() {\n    return (\n      <HomePage/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}